# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type stockEntitySchema {
  id: String!
  status: StockStatus
  variant: variantEntitySchema!
  title: String!
  description: String
  created_at: DateTime!
  updated_at: DateTime!
}

"""Show the status of stock item."""
enum StockStatus {
  """Means a user purchased this stock item."""
  CONSUMED

  """Stock item is available."""
  AVAILABLE

  """Stock item is disable by seller."""
  DISABLED

  """Stock item is deleted by seller."""
  DELETED
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type variantEntitySchema {
  id: String!
  stock: [stockEntitySchema!]!
  quantity: Float!
  type: VariantType!
  name: String!
  description: String
  price: Float!
  created_at: DateTime!
  updated_at: DateTime!
  deletedAt: DateTime!
}

"""Show the status of stock item."""
enum VariantType {
  """
  The product is already stocked and will be sent to the user instantly after payment approval
  """
  INSTANT

  """The seller will send the product later to the user via his dashboard"""
  ON_DEMAND
}

type ratingEntitySchema {
  id: String!
  value: Float!
  userId: String!
  description: String
  created_at: DateTime!
}

type ProductEntity {
  id: String!
  user_id: String!
  published: Boolean!
  price: Float!
  quantity: Float!
  title: String!
  description: String!
  image: [String!]!
  ratings: [ratingEntitySchema!]!
  created_at: DateTime!
  updated_at: DateTime!
}

type CategoryEntity {
  id: String!
  name: String!
  children: [CategoryEntity!]
  parent: CategoryEntity
}

type ProductSchemaObject {
  id: String
  user_id: String
  published: Boolean
  price: Float
  quantity: Float
  title: String
  description: String
  image: [String!]
  ratings: [RatingSchema!]!
  created_at: DateTime
  updated_at: DateTime
  user: UserSchema!
  variant: [VariantSchema!]!
}

type AddressEntity {
  address_1: String!
  address_2: String!
  city: String!
  state: String!
  country: String!
  zip: Float!
}

type UserEntity {
  id: String!
  seller: Boolean!
  name: String!
  email: String!
  password: String!
  gateway_customer_id: String!
  created_at: DateTime!
  updated_at: DateTime!
  address: AddressEntity!
}

type UserSchema {
  id: String!
  seller: Boolean!
  name: String!
  email: String!
  address: AddressEntity
}

type ProductOrderObject {
  product: ProductSchemaObject!
  quantity: Float!
}

type PublicUserSchema {
  id: String!
  name: String!
}

type OrderSchema {
  id: String!
  user_id: String!
  total_price: Float!
  products: [ProductOrderObject!]!
  status: OrderStatus!
  user: UserEntity!
}

"""Show the status of stock item."""
enum OrderStatus {
  PENDING
  FAILED
  SUCCEEDED
}

type StockSchema {
  id: String!
  status: StockStatus
  variant: variantEntitySchema!
  title: String!
  description: String
  created_at: DateTime!
  updated_at: DateTime!
}

type VariantSchema {
  id: String!
  type: VariantType!
  name: String!
  description: String
  price: Float!
  product: ProductSchemaObject!
  stock: [StockSchema!]!
}

type RatingSchema {
  id: String
  value: Float
  userId: String
  description: String
  created_at: DateTime
  user: PublicUserSchema
}

type AuthTokenSchema {
  id: String!
  name: String!
  token: String!
}

type RegisterUserSchema {
  id: String!
  seller: Boolean!
  name: String!
  email: String!
}

input stockEntityInput {
  id: String!
  status: StockStatus = AVAILABLE
  variant: variantEntityInput!
  title: String!
  description: String
  created_at: DateTime!
  updated_at: DateTime!
}

input variantEntityInput {
  id: String!
  stock: [stockEntityInput!]!
  quantity: Float = 1
  type: VariantType = INSTANT
  name: String!
  description: String
  price: Float!
  created_at: DateTime!
  updated_at: DateTime!
  deletedAt: DateTime!
}

input ratingEntityInput {
  id: String!
  value: Float!
  userId: String!
  description: String
  created_at: DateTime!
}

input ProductEntityInput {
  id: String!
  user_id: String!
  published: Boolean = false
  price: Float!
  quantity: Float!
  title: String!
  description: String!
  image: [String!]!
  ratings: [ratingEntityInput!]!
  created_at: DateTime!
  updated_at: DateTime!
}

type Query {
  users: UserEntity!
  me: UserSchema!
  products: [ProductSchemaObject!]!
  showProduct(id: String!): ProductSchemaObject!
  getProductStock(id: String!): [StockSchema!]!
  showStock(id: String!): StockSchema!
  showVariant(id: String!): VariantSchema!
  showRating(id: String!): RatingSchema!
  orders: OrderSchema!
  categories: [CategoryEntity!]!
  showCategory(id: String!): CategoryEntity!
}

type Mutation {
  login(data: LoginUserInput!): AuthTokenSchema!
  register(data: RegisterUserInput!): RegisterUserSchema!
  createProduct(data: CreateProductInput!): ProductSchemaObject!
  updateProduct(id: String!, data: UpdateProductInput!): ProductEntity!
  deleteProduct(id: String!): ProductEntity!
  createStock(data: CreateStockInput!): StockSchema!
  updateStock(id: String!, data: UpdateStockInput!): StockSchema!
  consumeStock(productId: String!): StockSchema!
  deleteStock(id: String!): StockSchema!
  createVariant(data: CreateVariantInput!): VariantSchema!
  updateVariant(id: String!, data: UpdateVariantInput!): VariantSchema!
  deleteVariant(id: String!): VariantSchema!
  createRating(data: CreateRatingInput!): RatingSchema!
  deleteOrder(id: String!): OrderSchema!
  createOrder(products: [ProductEntityInput!]!, id: Float!): [OrderSchema!]!
  createCategory(data: CreateCategoryInput!): CategoryEntity!
  updateCategory(id: Float!, data: CreateCategoryInput!): CategoryEntity!
  deleteCategory(id: String!): CategoryEntity!
}

input LoginUserInput {
  email: String!
  password: String!
}

input RegisterUserInput {
  email: String!
  password: String!
  name: String!
  password_confirmation: String!
  seller: Boolean!
}

input CreateProductInput {
  price: Float!
  title: String!
  description: String!
  image: [String!]!
}

input UpdateProductInput {
  price: Float
  title: String
  description: String
  image: [String!]
}

input CreateStockInput {
  status: StockStatus = AVAILABLE
  title: String
  description: String
  variantId: String!
}

input UpdateStockInput {
  status: StockStatus = AVAILABLE
  title: String
  description: String
  variantId: String
}

input CreateVariantInput {
  type: VariantType = INSTANT
  name: String!
  description: String
  price: Float!

  """product id"""
  productId: String!
}

input UpdateVariantInput {
  type: VariantType = INSTANT
  name: String!
  description: String
  price: Float!
}

input CreateRatingInput {
  value: Float!
  description: String

  """product id"""
  productId: String!
}

input CreateCategoryInput {
  children: [String!]
  parent: String
  name: String!
}
